%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: Enscript Output
%%For: Robert Feldt
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Sat Mar 23 15:32:04 2013
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 794 def
/d_page_h 547 def
/d_header_x 0 def
/d_header_y 511 def
/d_header_w 794 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 794 def
/d_footer_h 0 def
/d_output_w 794 def
/d_output_h 511 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 1 def
/fname (objective.rb) def
/fdir (.) def
/ftail (objective.rb) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (03/21/13) def
/modtimestr (23:35:36) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 501 M
(require 'feldtruby/optimize') s
5 493 M
(require 'feldtruby/float') s
5 485 M
(require 'feldtruby/optimize/sub_qualities_comparators') s
5 477 M
(require 'feldtruby/logger') s
5 469 M
(require 'feldtruby/float') s
5 453 M
(module FeldtRuby::Optimize) s
5 437 M
(# An Objective captures one or more \(sub-\)objectives into a single object) s
5 429 M
(# and supports a large number of ways to utilize basic objective) s
5 421 M
(# functions in a single framework. You subclass and add instance) s
5 413 M
(# methods named as ) s
5 405 M
(#   objective_min_qualityAspectName \(for an objective/aspect to be minimized\), or ) s
5 397 M
(#   objective_max_qualityAspectName \(for an objective/aspect to be minimized\).) s
5 389 M
(#) s
5 381 M
(# There can be multiple aspects \(sub-objectives\) for a single objective.) s
5 373 M
(#) s
5 365 M
(# An objective keeps track of the min and max value that has been seen so far) s
5 357 M
(# for each sub-objective.) s
5 341 M
(# This base class uses mean-weighted-global-ratios \(MWGR\) as the default mechanism) s
5 333 M
(# for handling multi-objectives i.e. with more than one sub-objective.) s
5 325 M
(#) s
5 317 M
(# An objective has version numbers to indicate the number of times a new min or max) s
5 309 M
(# value has been identified for a sub-objective.) s
5 301 M
(class Objective) s
5 293 M
(        include FeldtRuby::Logging) s
5 277 M
(        # Current version of this objective. Is updated when the min or max values for a sub) s
5 269 M
(-objective) s
5 261 M
(        # has been updated.) s
5 253 M
(        attr_accessor :current_version) s
5 237 M
(        def initialize) s
5 229 M
(                @current_version = 0) s
5 221 M
(                @pareto_front = Array.new\(num_aspects\) # The pareto front is misguided since) s
5 213 M
( it only has one best value per sub-objective, not the whole front!) s
5 197 M
(                setup_logger_and_distribute_to_instance_variables\(\)) s
5 189 M
(        end) s
5 173 M
(        # Return the number of aspects/sub-objectives of this objective.) s
5 165 M
(        def num_aspects) s
5 157 M
(                @num_aspects ||= aspect_methods.length) s
5 149 M
(        end) s
5 133 M
(        def num_sub_objectives) s
5 125 M
(                num_aspects) s
5 117 M
(        end) s
5 101 M
(        def aspect_methods) s
5 93 M
(                @aspect_methods ||= self.methods.select {|m| is_aspect_method?\(m\)}) s
5 85 M
(        end) s
5 69 M
(        def is_min_aspect?\(aspectIndex\)) s
5 61 M
(                \(@is_min_aspect ||= \(aspect_methods.map {|m| is_min_aspect_method?\(m\)}\)\)[asp) s
5 53 M
(ectIndex]) s
5 45 M
(        end) s
5 29 M
(        def is_aspect_method?\(methodNameAsSymbolOrString\)) s
5 21 M
(                methodNameAsSymbolOrString.to_s =~ /^objective_\(min|max\)_\([\\w_]+\)$/) s
5 13 M
(        end) s
402 501 M
(        def is_min_aspect_method?\(methodNameAsSymbolOrString\)) s
402 493 M
(                methodNameAsSymbolOrString.to_s =~ /^objective_min_\([\\w_]+\)$/) s
402 485 M
(        end) s
402 469 M
(        # The vectors can be mapped to a more complex candidate object before we call) s
402 461 M
(        # the sub objectives to calc their quality values. Default is no mapping but subclas) s
402 453 M
(ses) s
402 445 M
(        # can override this for more complex evaluation schemes.) s
402 437 M
(        def map_candidate_vector_to_candidate_to_be_evaluated\(vector\)) s
402 429 M
(                vector) s
402 421 M
(        end) s
402 405 M
(        # Return a vector of the "raw" sub-quality values, i.e. the fitness value for each s) s
402 397 M
(ub-objective.) s
402 389 M
(        # The candidate vector is assumed to be a vector of values.) s
402 381 M
(        def sub_qualities_of\(candidateVector\)) s
402 373 M
(                candidate = map_candidate_vector_to_candidate_to_be_evaluated\(candidateVecto) s
402 365 M
(r\)) s
402 357 M
(                aspect_methods.map {|omethod| self.send\(omethod, candidate\)}) s
402 349 M
(        end) s
402 333 M
(        # Return a single quality value for the whole objective for a given candidate. ) s
402 325 M
(        # By default this uses a variant of Bentley and Wakefield's sum-of-weighted-global-r) s
402 317 M
(atios \(SWGR\)) s
402 309 M
(        # called mean-of-weighted-global-ratios \(MWGR\) which always returns a fitness value) s
402 301 M
(        # in the range \(0.0, 1.0\) with 1.0 signaling the best fitness seen so far. The scale) s
402 293 M
( is adaptive) s
402 285 M
(        # though so that the best candidate so far always has a fitness value of 1.0.) s
402 277 M
(        def quality_of\(candidate, weights = self.default_weights\)) s
402 269 M
(                return candidate._quality_value_without_check if quality_value_is_up_to_date) s
402 261 M
(?\(candidate\)) s
402 253 M
(                num_aspects == 1 ? qv_single\(candidate\) : qv_mwgr\(candidate, weights\)) s
402 245 M
(        end) s
402 229 M
(        # Set the default weights to use when calculating a single quality values from) s
402 221 M
(        # the vector of sub-qualities.) s
402 213 M
(        def default_weights=\(weights\)) s
402 205 M
(                raise "Must be same number of weights as there are sub-objectives \(#{num_asp) s
402 197 M
(ects}\), but is #{weights.length}" unless weights.length == num_aspects) s
402 189 M
(                @default_weights = weights) s
402 181 M
(        end) s
402 165 M
(        # Current default weights among the sub-objectives \(nil if none have been set\)) s
402 157 M
(        attr_reader :default_weights) s
402 141 M
(        # Return the fitness of a candidate. It is the same as the quality value above.) s
402 133 M
(        def fitness_for\(candidate, weights = nil\)) s
402 125 M
(                quality_of\(candidate, weights\)) s
402 117 M
(        end) s
402 101 M
(  #############################) s
402 93 M
(  # Sane above here!) s
402 85 M
(  #############################) s
402 69 M
(        def reset_quality_scale\(candidate, aspectIndex, typeOfReset\)) s
402 61 M
(                if \(typeOfReset == :min && is_min_aspect?\(aspectIndex\)\) || ) s
402 53 M
(                   \(typeOfReset == :max && !is_min_aspect?\(aspectIndex\)\)) s
402 45 M
(                        @pareto_front[aspectIndex] = candidate) s
402 37 M
(                end) s
402 21 M
(                # Reset the best object since we have a new scale) s
402 13 M
(                @best_candidate = nil) s
402 5 M
(                @best_qv = nil) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 2 def
/fname (objective.rb) def
/fdir (.) def
/ftail (objective.rb) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (03/21/13) def
/modtimestr (23:35:36) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 493 M
(                inc_version_number) s
5 485 M
(        end) s
5 469 M
(        def update_best_candidate\(candidate\)) s
5 461 M
(                @best_candidate = candidate) s
5 453 M
(                @best_qv = candidate._quality_value) s
5 445 M
(        end) s
5 429 M
(        def inc_version_number) s
5 421 M
(                @current_version += 1) s
5 413 M
(        end) s
5 397 M
(        def quality_value_is_up_to_date?\(candidate\)) s
5 389 M
(                candidate._objective == self && candidate._objective_version == current_vers) s
5 381 M
(ion) s
5 373 M
(        end) s
5 357 M
(        def update_quality_value_in_object\(object, qv\)) s
5 349 M
(                object._objective = self) s
5 341 M
(                object._objective_version = current_version) s
5 333 M
(                object._quality_value_without_check = qv) s
5 325 M
(        end) s
5 309 M
(        def ensure_updated_quality_value\(candidate\)) s
5 301 M
(                return if quality_value_is_up_to_date?\(candidate\)) s
5 293 M
(                quality_value\(candidate\)) s
5 285 M
(        end) s
5 269 M
(        def rank_candidates\(candidates, weights = nil\)) s
5 261 M
(                mwgr_rank_candidates\(candidates, weights\)) s
5 253 M
(        end) s
5 237 M
(        # Rank candidates from best to worst. NOTE! We do the steps of MWGR separately since) s
5 229 M
( we must) s
5 221 M
(        # update the global mins and maxs before calculating the SWG ratios.) s
5 213 M
(        def mwgr_rank_candidates\(candidates, weights = nil\)) s
5 205 M
(                sub_qvss = candidates.map {|c| sub_qualities_of\(c\)}) s
5 197 M
(                sub_qvss.zip\(candidates\).each {|sub_qvs, c| update_global_mins_and_maxs\(sub_) s
5 189 M
(qvs, c\)}) s
5 181 M
(                sub_qvss.each_with_index.map do |sub_qvs, i|) s
5 173 M
(                        qv = mwgr_ratios\(sub_qvs\).weighted_mean\(weights\)) s
5 165 M
(                        qv = QualityValue.new\(qv, sub_qvs, self\)) s
5 157 M
(                        update_quality_value_in_object\(candidates[i], qv\)) s
5 149 M
(                        [candidates[i], qv, sub_qvs]) s
5 141 M
(                end.sort_by {|a| -a[1]} # sort by the ratio values in descending order) s
5 133 M
(        end) s
5 117 M
(        def note_end_of_optimization\(optimizer\)) s
5 109 M
(                log "Objective reporting the Pareto front:\\n" + info_pareto_front\(\)) s
5 101 M
(        end) s
5 85 M
(        def info_pareto_front) s
5 77 M
(                @pareto_front.each_with_index.map do |c, i|) s
5 69 M
(                        "Pareto front candidate for objective #{aspect_methods[i]}: #{map_ca) s
5 61 M
(ndidate_vector_to_candidate_to_be_evaluated\(c\).inspect}") s
5 53 M
(                end.join\("\\n"\)) s
5 45 M
(        end) s
5 29 M
(        # Return the quality value assuming this is a single objective.) s
5 21 M
(        def qv_single\(candidate\)) s
5 13 M
(                qv = self.send\(aspect_methods.first, ) s
5 5 M
(                        map_candidate_vector_to_candidate_to_be_evaluated\(candidate\)\)) s
402 501 M
(                update_quality_value_in_object\(candidate, qv\)) s
402 493 M
(                qv) s
402 485 M
(        end) s
402 469 M
(        # Mean-of-weigthed-global-ratios \(MWGR\) quality value) s
402 461 M
(        def qv_mwgr\(candidate, weights = nil\)) s
402 453 M
(                mwgr_rank_candidates\([candidate], weights\).first[1]) s
402 445 M
(        end) s
402 429 M
(        # Calculate the SWGR ratios) s
402 421 M
(        def mwgr_ratios\(subObjectiveValues\)) s
402 413 M
(                subObjectiveValues.each_with_index.map {|v,i| ratio_for_aspect\(i, v\)}) s
402 405 M
(        end) s
402 389 M
(        def ratio_for_aspect\(aspectIndex, value\)) s
402 381 M
(                min, max = global_min_values_per_aspect[aspectIndex], global_max_values_per_) s
402 373 M
(aspect[aspectIndex]) s
402 365 M
(                if is_min_aspect?\(aspectIndex\)) s
402 357 M
(                        numerator = max - value) s
402 349 M
(                else) s
402 341 M
(                        numerator = value - min) s
402 333 M
(                end) s
402 325 M
(                numerator.to_f.protected_division_with\(max - min\)) s
402 317 M
(        end) s
402 301 M
(        def update_global_mins_and_maxs\(aspectValues, candidate = nil\)) s
402 293 M
(                aspectValues.each_with_index {|v, i| update_global_min_and_max\(i, v, candida) s
402 285 M
(te\)}) s
402 277 M
(        end) s
402 261 M
(        def update_global_min_and_max\(aspectIndex, value, candidate\)) s
402 253 M
(                min = global_min_values_per_aspect[aspectIndex]) s
402 245 M
(                if value < min) s
402 237 M
(                        reset_quality_scale\(candidate, aspectIndex, :min\)) s
402 229 M
(                        global_min_values_per_aspect[aspectIndex] = value) s
402 221 M
(                        log_new_min_max\(aspectIndex, value, min, "min"\)) s
402 213 M
(                end) s
402 205 M
(                max = global_max_values_per_aspect[aspectIndex]) s
402 197 M
(                if value > max) s
402 189 M
(                        reset_quality_scale\(candidate, aspectIndex, :max\)) s
402 181 M
(                        global_max_values_per_aspect[aspectIndex] = value) s
402 173 M
(                        log_new_min_max\(aspectIndex, value, max, "max"\)) s
402 165 M
(                end) s
402 157 M
(        end) s
402 141 M
(        # Class for representing multi-objective qualitites...) s
402 133 M
(        class QualityValue) s
402 125 M
(                attr_reader :qv, :sub_qvs, :objective) s
402 109 M
(                def initialize\(qv, subQvs, objective\)) s
402 101 M
(                        @qv, @sub_qvs, @objective = qv, subQvs, objective) s
402 93 M
(                        @version = objective.current_version) s
402 85 M
(                end) s
402 69 M
(                def <=>\(other\)) s
402 61 M
(                        @qv <=> other.qv) s
402 53 M
(                end) s
402 37 M
(                # Two quality values are the same if they have the same qv, regardless of th) s
402 29 M
(eir) s
402 21 M
(                # sub qualities.) s
402 13 M
(                def ==\(other\)) s
402 5 M
(                        other = other.qv if QualityValue === other) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
24 -571 translate
/pagenum 3 def
/fname (objective.rb) def
/fdir (.) def
/ftail (objective.rb) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (03/21/13) def
/modtimestr (23:35:36) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 501 M
(                        @qv == other) s
5 493 M
(                end) s
5 477 M
(                def improvement_in_relation_to\(other\)) s
5 469 M
(                        if QualityValue === other) s
5 461 M
(                                pdiff = @qv.ratio_diff_vs\(other.qv\)) s
5 453 M
(                                subpdiffs = @sub_qvs.zip\(other.sub_qvs\).map {|s, os| s.ratio) s
5 445 M
(_diff_vs\(os\)}) s
5 437 M
(                                qinspect\(pdiff, subpdiffs, "Difference", "SubQ. differences") s
5 429 M
(, true\) + ", #{report_on_num_differences\(subpdiffs\)}") s
5 421 M
(                        else) s
5 413 M
(                                @qv.improvement_in_relation_to\(other\)) s
5 405 M
(                        end) s
5 397 M
(                end) s
5 381 M
(                def report_on_num_differences\(subQvRatioDiffs\)) s
5 373 M
(                        num_inc = subQvRatioDiffs.select {|v| v > 0}.length) s
5 365 M
(                        num_dec = subQvRatioDiffs.select {|v| v < 0}.length) s
5 357 M
(                        num_same = subQvRatioDiffs.length - num_inc - num_dec) s
5 349 M
(                        "#{num_inc} increased, #{num_dec} decreased, #{num_same} same") s
5 341 M
(                end) s
5 325 M
(                def qinspect\(qv, subQvs, qvDesc = "Quality", subQvDesc = "SubQualities", sub) s
5 317 M
(QvsAreRatios = false, qvIsRatio = true\)) s
5 309 M
(                        subQvs = subQvs.map {|v| v*100.0} if subQvsAreRatios) s
5 301 M
(                        sqs = subQvs.map do |sqv| ) s
5 293 M
(                                #s = \(Float === sqv ? sqv.round_to_decimals\(4\) : sqv\).inspec) s
5 285 M
(t) s
5 277 M
(                                s = sqv.signif\(6\).inspect) s
5 269 M
(                                s += "%" if subQvsAreRatios) s
5 261 M
(                                s) s
5 253 M
(                        end.join\(", "\)) s
5 245 M
(                        if qvIsRatio) s
5 237 M
(                                qstr = \("%.4f" % \(100.0 * qv\)\) + "%") s
5 229 M
(                        else) s
5 221 M
(                                qstr = "%.4f" % qv) s
5 213 M
(                        end) s
5 205 M
(                        "#{qvDesc}: #{qstr}, #{subQvDesc}: [#{sqs}]") s
5 197 M
(                end) s
5 181 M
(                def inspect) s
5 173 M
(                        qinspect\(@qv, @sub_qvs\) + ", Obj. version: #{@version}") s
5 165 M
(                end) s
5 149 M
(                # Refer all other methods to the main quality value) s
5 141 M
(                def method_missing\(meth, *args, &block\)) s
5 133 M
(                        @qv.send\(meth, *args, &block\)) s
5 125 M
(    end) s
5 117 M
(        end) s
5 101 M
(        def log_new_min_max\(index, newValue, oldValue, description\)) s
5 93 M
(                #log\("New global #{description} for sub-objective #{aspect_methods[index]}\\n) s
5 85 M
(" +) s
5 77 M
(                #       \("a %.3f" % \(100.0 * \(newValue - oldValue\).protected_division_with\(o) s
5 69 M
(ldValue\)\)\) + "% difference\\n" +) s
5 61 M
(                #       "new = #{newValue.to_significant_digits\(4\)}, old = #{oldValue.to_sig) s
5 53 M
(nificant_digits\(4\)}\\n" +) s
5 45 M
(                #       "scale is now [#{global_min_values_per_aspect[index].to_significant_) s
5 37 M
(digits\(4\)}, #{global_max_values_per_aspect[index].to_significant_digits\(4\)}]\\n" +) s
5 29 M
(                #       "objective version = #{current_version}"\)) s
5 21 M
(                log_value \("new_global_#{description}_#{aspect_methods[index]}"\).intern, new) s
5 13 M
(Value, "New global #{description} for sub-objective #{aspect_methods[index]}") s
5 5 M
(        end) s
402 493 M
(        # Global min values for each aspect. Needed for SWGR. Updated every time we see a ne) s
402 485 M
(w) s
402 477 M
(        # quality value for an aspect.) s
402 469 M
(        # All are minus infinity when we have not seen any values yet.) s
402 461 M
(        def global_min_values_per_aspect) s
402 453 M
(                @global_min_values_per_aspect ||= Array.new\(num_aspects\).map {Float::INFINIT) s
402 445 M
(Y}) s
402 437 M
(        end) s
402 421 M
(        # Global max values for each aspect. Needed for SWGR. Updated every time we see a ne) s
402 413 M
(w) s
402 405 M
(        # quality value for an aspect.) s
402 397 M
(        # All are minus infinity when we have not seen any values yet.) s
402 389 M
(        def global_max_values_per_aspect) s
402 381 M
(                @global_max_values_per_aspect ||= Array.new\(num_aspects\).map {-Float::INFINI) s
402 373 M
(TY}) s
402 365 M
(        end) s
402 357 M
(end) s
402 341 M
(# The MWGR is a simple way to weigh the fitness values of multiple sub-objectives into a sin) s
402 333 M
(gle) s
402 325 M
(# fitness value.) s
402 317 M
(module MeanWeigthedGlobalRatios) s
402 309 M
(end) s
402 293 M
(# Short hand for when the objective function is given as a block that should be minimized.) s
402 285 M
(class ObjectiveMinimizeBlock < Objective) s
402 277 M
(        def initialize\(&objFunc\)) s
402 269 M
(                super\(\)) s
402 261 M
(                @objective_function = objFunc) s
402 253 M
(        end) s
402 237 M
(        def objective_min_cost_function\(candidate\)) s
402 229 M
(                @objective_function.call\(*candidate.to_a\)) s
402 221 M
(        end) s
402 213 M
(end) s
402 197 M
(# Short hand for when the objective function is given as a block that should be minimized.) s
402 189 M
(class ObjectiveMaximizeBlock < Objective) s
402 181 M
(        def initialize\(&objFunc\)) s
402 173 M
(                super\(\)) s
402 165 M
(                @objective_function = objFunc) s
402 157 M
(        end) s
402 141 M
(        def objective_max_cost_function\(candidate\)) s
402 133 M
(                @objective_function.call\(*candidate.to_a\)) s
402 125 M
(        end) s
402 117 M
(end) s
402 101 M
(end) s
402 85 M
(# We add strangely named accessor methods so we can attach the quality values to objects.) s
402 77 M
(# We use strange names to minimize risk of method name conflicts.) s
402 69 M
(class Object) s
402 61 M
(        attr_accessor :_quality_value_without_check, :_objective, :_objective_version) s
402 53 M
(        def _quality_value) s
402 45 M
(                @_objective.ensure_updated_quality_value\(self\) if defined?\(@_objective\) && @) s
402 37 M
(_objective) s
402 29 M
(                @_quality_value_without_check ||= nil # To avoid warning if unset) s
402 21 M
(        end) s
402 13 M
(end) s
_R
S
%%Trailer
%%Pages: 3
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
